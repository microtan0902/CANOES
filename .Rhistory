# read in the data
gc <- read.table("gc.txt")$V2
gc
canoes.reads <- read.table("canoes.reads.txt")
# rename the columns of canoes.reads
sample.names <- paste("S", seq(1:26), sep="")
names(canoes.reads) <- c("chromosome", "start", "end", sample.names)
# create a vector of consecutive target ids
target <- seq(1, nrow(canoes.reads))
# combine the data into one data frame
canoes.reads <- cbind(target, gc, canoes.reads)
# call CNVs in each sample
# create a vector to hold the results for each sample
xcnv.list <- vector('list', length(sample.names))
for (i in 1:length(sample.names)){
xcnv.list[[i]] <- CallCNVs(sample.names[i], canoes.reads)
}
# DEPENDENCIES
#    nnls, Hmisc, mgcv, plyr
load(CANOES.R)
# DEPENDENCIES
#    nnls, Hmisc, mgcv, plyr
load("CANOES.R")
# DEPENDENCIES
#    nnls, Hmisc, mgcv, plyr
source("CANOES.R")
for (i in 1:length(sample.names)){
xcnv.list[[i]] <- CallCNVs(sample.names[i], canoes.reads)
}
# combine the results into one data frame
xcnvs <- do.call('rbind', xcnv.list)
# inspect the first two CNV calls
print(head(xcnvs, 2))
# plot all the CNV calls to a pdf
pdf("CNVplots.pdf")
for (i in 1:nrow(xcnvs)){
PlotCNV(canoes.reads, xcnvs[i, "SAMPLE"], xcnvs[i, "TARGETS"])
}
dev.off()
# genotype all the CNVs calls made above in sample S2
genotyping.S2 <- GenotypeCNVs(xcnvs, "S2", canoes.reads)
# inspect the genotype scores for the first two CNV calls
print(head(genotyping.S2, 2))
cov
sample.name
counts
canoes.reads
sample.names
system.time(covariance <- cor(canoes.reads[, sample.names], canoes.reads[, sample.names]))
covariance
cor_fast <- cora(canoes.reads[, sample.names], canoes.reads[, sample.names]))
cora
install.packages("Rfast")
cor_fast <- cora(canoes.reads[, sample.names], canoes.reads[, sample.names])
library(Rfast)
cor_fast <- cora(canoes.reads[, sample.names], canoes.reads[, sample.names])
cor_fast <- cora(canoes.reads[, sample.names], canoes.reads[, sample.names])
system.time(covariance <- cor(canoes.reads[, sample.names], canoes.reads[, sample.names]))
cora
cor_fast <- cora(canoes.reads[, sample.names])
canoes.reads[, sample.names]
x <- matrnorm(100, 40)
x
s1 <- cov(x)
s2 <- cova(x)
s1
s2
all.equal(s1, s2)
dim(x)
dim(canoes.reads)
x[1:10,1:10]
canoes.reads[1:10,1:10]
x<-canoes.reads[, sample.names]
x
y<-canoes.reads[, sample.names]
x <- matrnorm(100, 40)
x
cor_fast <- cora(y)
y
typeof(y)
typeof(x)
y<-as.double(canoes.reads[, sample.names])
typeof(canoes.reads)
y<-as.matrix(canoes.reads[, sample.names])
cor_fast <- cora(y)
all.equal(covariance, cor_fast)
cor_fast
covariance
cor_fast
system.time(covariance <- cor(canoes.reads[, sample.names], canoes.reads[, sample.names]))
system.time(y<-as.matrix(canoes.reads[, sample.names]))
install.packages("Rfasta2")
install.packages("Rfast2")
install.packages("fastCor")
install.packages("HiClimR")
library("HiClimR")
system.time(cor_fast2 <- fastCor(canoes.reads[, sample.names],nSplit = 1, upperTri = FALSE, optBLAS = FALSE, verbose = TRUE))
cor_fast2
all.equal(covariance,cor_fast2)
all.equal(covariance, cor_fast)
system.time(covariance <- cor(canoes.reads[, sample.names], canoes.reads[, sample.names]))
system.time(cor_fast <- cora(as.matrix(canoes.reads[, sample.names])))
system.time(cor_fast2 <- fastCor(canoes.reads[, sample.names],nSplit = 1, upperTri = FALSE, optBLAS = FALSE, verbose = TRUE))
# DEPENDENCIES
#    nnls, Hmisc, mgcv, plyr
source("CANOES.R")
library("HiClimR")
# read in the data
gc <- read.table("gc.txt")$V2
canoes.reads <- read.table("canoes.reads.txt")
class(canoes.reads)
# rename the columns of canoes.reads
sample.names <- paste("S", seq(1:26), sep="")
names(canoes.reads) <- c("chromosome", "start", "end", sample.names)
# create a vector of consecutive target ids
target <- seq(1, nrow(canoes.reads))
# combine the data into one data frame
canoes.reads <- cbind(target, gc, canoes.reads)
class(canoes.reads)
# call CNVs in each sample
# create a vector to hold the results for each sample
xcnv.list <- vector('list', length(sample.names))
canoes.reads <- as.matrix(canoes.reads)
for (i in 1:length(sample.names)){
xcnv.list[[i]] <- CallCNVs(sample.names[i], canoes.reads)
}
canoes.reads
sample.names
canoes.reads
for (i in 1:length(sample.names)){
xcnv.list[[i]] <- CallCNVs(sample.names[i], canoes.reads)
}
1e-2
1e-5
1e-5*10000
x <- 1:12
# a random permutation
sample(x)
# bootstrap resampling -- only if length(x) > 1 !
sample(x, replace = TRUE)
x
sample(x,3)
